{"version":3,"file":"static/js/886.a326c963.chunk.js","mappings":"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","sources":["components/ContactForm/contactform.jsx","components/Filter/filter.jsx","components/Loader/loader.jsx","components/ItemContact/itemcontact.jsx","components/UIBase/uibase.jsx","components/ContactList/contactlist.jsx","components/UsrPage/usrpage.jsx"],"sourcesContent":["import { addContact } from '../../redux/operations';\nimport css from '../Styles.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/selectors';\n\nexport const ContactForm = () => {\n    const dispatch = useDispatch();\n    const namesContacts = useSelector(selectContacts).map(contact => contact.name);\n\n    const updateStateForAdd = (evt) => {\n        evt.preventDefault();\n        const newName = evt.currentTarget.elements.name.value;\n        \n        if(!namesContacts.some(name => name.toLowerCase() === newName.toLowerCase())){\n            const newNumb = evt.currentTarget.elements.number.value;\n            const dataForAdd = {\n                name: newName,\n                number: newNumb\n            }\n            dispatch(addContact(dataForAdd));\n            evt.currentTarget.reset();\n            removeClasses();\n        } else{\n            alert(`${newName} is already in contacts.`)\n        }\n        };\n\n        function forAddButton(){\n            const modalDivContactForm = document.querySelector('.modalDivContactForm');\n            const firstDivContactForm = document.querySelector('.firstDivContactForm');\n            const inputNameAdd = document.querySelector('.inputNameAdd');\n\n            modalDivContactForm.classList.add(css.modalDivContactFormActive);\n            firstDivContactForm.classList.add(css.firstDivContactFormActive);\n            \n            setTimeout(() => {\n                inputNameAdd.focus();\n            }, 100);\n\n            modalDivContactForm.addEventListener('click', removeClasses);\n            document.addEventListener('keydown', closeModalForEsc);\n        };\n\n        const closeModalForEsc = (e) => {\n            if(e.key === 'Escape'){\n                removeClasses();\n            }\n        };\n\n        const removeClasses = (e) => {\n            const modalDivContactForm = document.querySelector('.modalDivContactForm');\n            const firstDivContactForm = document.querySelector('.firstDivContactForm');\n            const inputsAdd = document.querySelectorAll('.inputsAdd');\n\n            function workRC(){\n                modalDivContactForm.removeEventListener('click', removeClasses);\n                document.removeEventListener('keydown', closeModalForEsc);\n                inputsAdd.forEach(input => input.blur());\n                modalDivContactForm.classList.remove(css.modalDivContactFormActive);\n                firstDivContactForm.classList.remove(css.firstDivContactFormActive);\n            };\n\n            if(e){\n            if (e.target.classList.contains(css.modalDivContactFormActive)){\n            workRC();\n            };\n        } else{\n            workRC();\n        }\n        };\n\n    return (\n        <div className={[css.modalDivContactForm, 'modalDivContactForm'].join(' ')}>\n            <div className={[css.firstDivContactForm, 'firstDivContactForm'].join(' ')}>\n                <div className={css.divForMiniContactForm}>\n                    <button className={css.buttonAddMiniContactForm} type='button' onClick={forAddButton}>\n                        Add\n                    </button>\n                    </div>\n                <div className={css.divContactForm}>\n\n                <form className={css.formContactForm} onSubmit={updateStateForAdd}>\n            <label className={css.labelContactForm}>\n                <span className={css.nameInputContactForm}>Name</span>\n            <input className={[css.inputContactForm,'inputNameAdd', 'inputsAdd'].join(' ')} type=\"text\" name=\"name\" required/>\n            </label>\n            <label className={css.labelContactForm}>\n                <span className={css.nameInputContactForm}>Number</span>\n                <input className={[css.inputContactForm, 'inputsAdd'].join(' ')} type=\"tel\" name=\"number\" required />\n            </label>\n            <button className={css.buttonContactForm} type=\"submit\">Add contact</button>\n        </form>\n                </div>\n        </div>\n        </div>\n    )\n};","import css from '../Styles.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectFilter } from '../../redux/selectors';\nimport { setFilter } from '../../redux/filterSlice';\nexport const Filter = () => {\n    const filterWithState = useSelector(selectFilter);\n    const dispatch = useDispatch();\n\n    const updateStateForFilter = (evt) => {\n        evt.preventDefault();\n        const filterValue = evt.target.value;\n        dispatch(setFilter(filterValue));\n    };\n\n        return(\n            <label className={css.labelFilter}>\n                <input \n                value={filterWithState}\n                className={css.inputFilter} \n                type=\"text\" \n                name=\"filter\" \n                placeholder='Please start typing the desired name'\n                onChange={updateStateForFilter}\n                />\n            </label>\n        )\n}","import styled, { keyframes} from \"styled-components\";\n\nconst rotate = keyframes`\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n`;\n\nconst LoaderContaiter = styled.div`\nposition: absolute;\ntop: 50%;\nleft: 50%;\n`;\n\nconst RollerContainer = styled.div`\n  display: inline-block;\n  position: relative;\n  width: 1200px;\n  height: 1200px;\n`;\n\nconst RollerDiv = styled.div`\n  animation: ${rotate} 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n  transform-origin: 40px 40px;\n\n  &:after {\n    content: \" \";\n    display: block;\n    position: absolute;\n    width: 7px;\n    height: 7px;\n    border-radius: 50%;\n    background: #000;\n    margin: -4px 0 0 -4px;\n  }\n`;\n\nconst RollerItem = styled(RollerDiv)`\n  &:nth-child(1) {\n    animation-delay: -0.036s;\n    &:after {\n      top: 63px;\n      left: 63px;\n    }\n  }\n  &:nth-child(2) {\n    animation-delay: -0.072s;\n    &:after {\n      top: 68px;\n      left: 56px;\n    }\n  }\n  &:nth-child(3) {\n    animation-delay: -0.108s;\n    &:after {\n      top: 71px;\n      left: 48px;\n    }\n  }\n  &:nth-child(4) {\n    animation-delay: -0.144s;\n    &:after {\n      top: 72px;\n      left: 40px;\n    }\n  }\n  &:nth-child(5) {\n    animation-delay: -0.18s;\n    &:after {\n      top: 71px;\n      left: 32px;\n    }\n  }\n  &:nth-child(6) {\n    animation-delay: -0.216s;\n    &:after {\n      top: 68px;\n      left: 24px;\n    }\n  }\n  &:nth-child(7) {\n    animation-delay: -0.252s;\n    &:after {\n      top: 63px;\n      left: 17px;\n    }\n  }\n  &:nth-child(8) {\n    animation-delay: -0.288s;\n    &:after {\n      top: 56px;\n      left: 12px;\n    }\n  }\n`;\n\nexport const Loader = () => {\n    return(\n    <LoaderContaiter>\n        <RollerContainer>\n    {[...Array(8)].map((_, index) => (\n    <RollerItem key={index} />\n    ))}\n    </RollerContainer>\n    </LoaderContaiter>\n    )};","import css from '../Styles.module.css';\nimport {  useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/operations';\n\nexport const ItemContact = ({contact}) => {\n    const dispatch = useDispatch();\n\n    const updateStateForDelete = () => {\n        const idContact = contact.id;\n        dispatch(deleteContact(idContact));\n        };\n\n    return(\n        <li key={contact.id} className={css.itemContscts}>\n                <p className={css.pItemContactsName}>{contact.name}:</p> \n                <p className={css.pItemContactsNumber}>{contact.phone}</p>\n                <button id={contact.id} className={css.buttonDelete} type='button' onClick={updateStateForDelete}>\n                    Delete\n                </button>\n        </li>\n    )\n}","import css from \"../Styles.module.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ItemContact } from \"components/ItemContact/itemcontact\";\nimport { selectContacts, selectFilter, selectScrollLeftLists } from \"../../redux/selectors\";\nimport { useRef, useEffect, useState } from \"react\";\nimport { setScrollLeftLists } from \"../../redux/contactsSlice\";\n\nexport const UlForCL = () => {\n    const dispatch = useDispatch();\n    let contacts = useSelector(selectContacts);\n    const filter = useSelector(selectFilter);\n    const scrollLeftLists = useSelector(selectScrollLeftLists);\n\n    const [activeId, setActiveId] = useState(null);\n    const [actualScroll, setActualScroll] = useState(0);\n    const [listContHasEL, setListContHasEL] = useState(false);\n\n    const listContacts = useRef(null);\n    const listContactsRef = listContacts.current;\n\n    useEffect(() => {\n        if(scrollLeftLists > 0){\n            if(listContacts.current){\n                listContacts.current.scrollLeft = scrollLeftLists + 50;\n                dispatch(setScrollLeftLists(0));\n            }\n        }\n    });\n\n    if(filter.length > 0) {\n        contacts = contacts.filter((contact) => contact.name.toLowerCase().includes(filter.toLowerCase()))\n    };\n\n    useEffect(() => {\n        const itemsContact = document.querySelectorAll('.itemContact');\n        const listContactsForGap = document.querySelector('.listContactsForGap');\n        const coef = 2;\n        const screenWidth = window.innerWidth;\n        itemsContact.forEach(i => {\n            i.style.minWidth = screenWidth/coef + 'px';\n            i.style.height = screenWidth/(coef * 1.667) + 'px';\n        });\n        listContactsForGap.style.gap = screenWidth/(coef * 10) + 'px';\n\n        const forScroll = () => {\n            setActualScroll(listContacts.current.scrollLeft);\n            itemsContact.forEach(item => readRectItem(item));\n        };\n\n        if(!listContHasEL && listContacts.current){\n            setListContHasEL(true);\n            listContacts.current.removeEventListener('scroll', forScroll);\n            listContacts.current.addEventListener('scroll', forScroll);\n        };\n\n        const autoScroll = (item, conditionForAutoSc = 0) => {\n            itemsContact.forEach(i => {\n                i.style.minWidth = screenWidth/coef + 'px';\n                i.style.height = screenWidth/(coef * 1.667) + 'px';\n                i.classList.remove(css.itemContactActive);\n            });\n                    item.style.minWidth = (screenWidth/coef * 1.4) + 'px';\n                    item.style.height = (screenWidth/(coef * 1.667) * 1.4) + 'px';\n                    item.classList.add(css.itemContactActive);\n                    setActiveId(item.getAttribute('id'));\n                    const scrollLForList = listContacts.current.scrollLeft;\n                    listContacts.current.style.scrollBehavior = 'smooth';\n                    if(conditionForAutoSc !== 0){\n                        listContacts.current.scrollLeft = scrollLForList + conditionForAutoSc;\n                    };\n\n                    listContacts.current.removeEventListener('scroll', forScroll);\n                    listContacts.current.removeEventListener('scroll', forScroll);\n                    \n                    setTimeout(() => {\n                        if(listContacts.current){\n                            listContacts.current.addEventListener('scroll', forScroll);\n                        }\n                    }, 1000);\n        };\n\n        itemsContact.forEach(item => item.addEventListener('click', () => {\n            const rectItem = item.getBoundingClientRect();\n            const rectListContacts = listContacts.current.getBoundingClientRect();\n            if(rectItem.x < rectListContacts.x + rectListContacts.width/2) {\n                const conditionForAutoSc = 0 - rectListContacts.width/2 + rectItem.x + 280;\n                autoScroll(item, conditionForAutoSc);\n            } else {\n                const conditionForAutoSc = 0  - rectListContacts.width/2 + rectItem.x + 80;\n                autoScroll(item, conditionForAutoSc);\n            }\n        }));\n\n        const readRectItem = (item) => {\n            const rectItem = item.getBoundingClientRect();\n            const rectListContacts = listContacts.current.getBoundingClientRect();\n            const startActive = rectListContacts.x + rectListContacts.width/2 - rectItem.width/2 + 50 - 270;\n            const secondStAct = rectListContacts.x + rectListContacts.width/2 + rectItem.width/2 - 50 - 270;\n            if(rectItem.x > startActive && \n                rectItem.x < rectListContacts.x + rectListContacts.width/2 &&\n                !item.classList.contains(css.itemContactActive)){\n                    const conditionForAutoSc = 0 - rectItem.width/2 + 200;\n                autoScroll(item, conditionForAutoSc);\n            } else if(rectItem.x > rectListContacts.x + rectListContacts.width/2 && \n                rectItem.x < secondStAct &&\n                !item.classList.contains(css.itemContactActive)){\n                    const conditionForAutoSc = 0 + rectItem.width/2 - 100;\n                    autoScroll(item, conditionForAutoSc);\n                }\n        };\n        return () => {\n            if(listContactsRef){\n                listContactsRef.removeEventListener('scroll', forScroll);\n            }\n        }\n    }, [contacts, listContHasEL, listContactsRef]);\n    return(\n        <ul ref={listContacts} className={[css.listContacts, 'listContactsForGap'].join(' ')}>\n            {contacts.length !== 0 &&\n                contacts.map((contact) => { \n                    return(\n                    <li key={contact.id} id={contact.id} className={[css.itemContact, 'itemContact'].join(' ')}>\n                    <ItemContact \n                        contact={contact}\n                        index={contacts.indexOf(contact)}\n                        id={contact.id}\n                        activeId={activeId}\n                        actualScroll={actualScroll}\n                    />\n                    </li>\n                )})\n            }\n        </ul>\n    )\n};","import css from '../Styles.module.css';\nimport { useEffect } from \"react\";\nimport { fetchContacts } from \"../../redux/operations\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Loader } from \"../Loader/loader\";\nimport { createNumbs } from '../../redux/backgroundImgSlice';\nimport { UlForCL } from 'components/UIBase/uibase';\nimport { selectIsLoading, selectError, selectNumbsForImg, selectBackgrounds } from '../../redux/selectors';\nexport const ContactList = () => {\n    const realScreenWidth = window.innerWidth;\n    \n    const backgrounds = useSelector(selectBackgrounds);\n    const numbsForImg = useSelector(selectNumbsForImg);\n\n    const dispatch = useDispatch();\n    const isLoading = useSelector(selectIsLoading);\n    const error = useSelector(selectError);\n\n    const makeMassifNumbs = () => {\n        const massifNumbers = [];\n        const lengthImgMas = backgrounds.length - 1;\n        function createMassNumbs (){\n            const randomNumb = Math.floor(Math.random() * lengthImgMas);\n        const lengthMasNumb = massifNumbers.length;\n        if( massifNumbers[lengthMasNumb-1] !== randomNumb &&\n            massifNumbers[lengthMasNumb-2] !== randomNumb &&\n            massifNumbers[lengthMasNumb-3] !== randomNumb &&\n            massifNumbers[lengthMasNumb-4] !== randomNumb &&\n            massifNumbers[lengthMasNumb-5] !== randomNumb ){\n            massifNumbers.push(randomNumb);\n        } else {\n            createMassNumbs();\n        }\n        };\n        for (let i = 0; i <= lengthImgMas; i++){\n            createMassNumbs();\n        }\n        return massifNumbers\n    };\n\n    useEffect(() => {\n        if (numbsForImg.length < backgrounds.length){\n        dispatch(createNumbs(makeMassifNumbs()));\n        };\n    });\n\n    useEffect(() => {\n        dispatch(fetchContacts());\n    }, [dispatch]);\n\n    let varPadding = 20;\n    if(realScreenWidth > 1000){\n        varPadding = 50;\n    } else if(realScreenWidth > 500 && realScreenWidth <=1000){\n        varPadding = realScreenWidth/20;\n    } else{\n        varPadding = realScreenWidth/40;\n    }\n\n    return(\n        <>\n        {error ? (\n        <h2>Oopsss...Something went wrong...</h2>\n        ) : (\n        <div id='divForContactList' className={css.divForContactList}\n        style={{\n            paddingLeft: varPadding,\n            paddingRight: varPadding,\n        }}\n        >\n                {isLoading && !error ? <Loader /> : <UlForCL />}\n            </div>\n            )}\n        </>\n    )\n}","import { ContactForm } from 'components/ContactForm/contactform';\nimport { Filter } from 'components/Filter/filter';\nimport { ContactList } from 'components/ContactList/contactlist';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\nimport { selectToken } from '../../redux/BackEndProps/selectors';\nimport css from '../Styles.module.css';\n\nconst PageUsers = () => {\n    const token = useSelector(selectToken);\n    if (token) {\n        axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n    }\n    return(\n        <>\n        <div className={css.divContFiltPageUsers}>\n        <Filter />\n        <ContactForm />\n        </div>\n        <ContactList />\n        </>\n    )\n};\n\nexport default PageUsers;"],"names":["ContactForm","dispatch","useDispatch","namesContacts","useSelector","selectContacts","map","contact","name","closeModalForEsc","e","key","removeClasses","modalDivContactForm","document","querySelector","firstDivContactForm","inputsAdd","querySelectorAll","workRC","removeEventListener","forEach","input","blur","classList","remove","css","target","contains","_jsx","className","join","children","_jsxs","type","onClick","inputNameAdd","add","setTimeout","focus","addEventListener","onSubmit","evt","preventDefault","newName","currentTarget","elements","value","some","toLowerCase","alert","concat","newNumb","number","dataForAdd","addContact","reset","required","Filter","filterWithState","selectFilter","placeholder","onChange","filterValue","setFilter","rotate","keyframes","_templateObject","_taggedTemplateLiteral","LoaderContaiter","styled","_templateObject2","RollerContainer","_templateObject3","RollerDiv","_templateObject4","RollerItem","_templateObject5","Loader","_toConsumableArray","Array","_","index","ItemContact","_ref","phone","id","idContact","deleteContact","UlForCL","contacts","filter","scrollLeftLists","selectScrollLeftLists","_useState","useState","_useState2","_slicedToArray","activeId","setActiveId","_useState3","_useState4","actualScroll","setActualScroll","_useState5","_useState6","listContHasEL","setListContHasEL","listContacts","useRef","listContactsRef","current","useEffect","scrollLeft","setScrollLeftLists","length","includes","itemsContact","listContactsForGap","screenWidth","window","innerWidth","i","style","minWidth","height","gap","forScroll","item","readRectItem","autoScroll","conditionForAutoSc","arguments","undefined","getAttribute","scrollLForList","scrollBehavior","rectItem","getBoundingClientRect","rectListContacts","x","width","startActive","secondStAct","ref","indexOf","ContactList","realScreenWidth","backgrounds","selectBackgrounds","numbsForImg","selectNumbsForImg","isLoading","selectIsLoading","error","selectError","createNumbs","massifNumbers","lengthImgMas","createMassNumbs","randomNumb","Math","floor","random","lengthMasNumb","push","makeMassifNumbs","fetchContacts","varPadding","_Fragment","paddingLeft","paddingRight","token","selectToken","axios"],"sourceRoot":""}