{"version":3,"file":"static/js/563.df0361e1.chunk.js","mappings":"2OAsDA,UA7CkB,WACd,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,KAE1BC,EAAAA,EAAAA,YAAU,WACe,MAAlBC,OAAOJ,IAAgBK,EAAAA,GAAAA,MAAY,kBACtCP,GAASQ,EAAAA,EAAAA,KACb,GAAG,CAACN,EAAOF,IASX,OACIS,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAAA,EAAAA,aAAiBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAIH,UAAWC,EAAAA,EAAAA,eAAmBC,SAAC,0CACnCH,EAAAA,EAAAA,MAAA,QAAMC,UAAWC,EAAAA,EAAAA,UAAeG,SAVnB,SAACC,GAClBA,EAAEC,iBACF,IAAMC,EAAQF,EAAEG,cAAcC,SAASF,MAAMG,MACvCC,EAAWN,EAAEG,cAAcC,SAASE,SAASD,MACnDpB,GAASsB,EAAAA,EAAAA,IAAM,CAACL,MAAAA,EAAOI,SAAAA,IAC3B,EAK+DT,SAAA,EACnDH,EAAAA,EAAAA,MAAA,SAAOC,UAAWC,EAAAA,EAAAA,eAAmBC,SAAA,EACjCC,EAAAA,EAAAA,KAAA,QAAMH,UAAWC,EAAAA,EAAAA,cAAkBC,SAAC,WACxCC,EAAAA,EAAAA,KAAA,SAAOH,UAAWC,EAAAA,EAAAA,eAClBY,KAAK,QACLC,KAAK,QACLC,aAAa,MACbC,WAAS,EACTC,YAAY,uCAEZlB,EAAAA,EAAAA,MAAA,SAAOC,UAAWC,EAAAA,EAAAA,eAAmBC,SAAA,EACjCC,EAAAA,EAAAA,KAAA,QAAMH,UAAWC,EAAAA,EAAAA,WAAeC,SAAC,cACrCC,EAAAA,EAAAA,KAAA,SAAOH,UAAWC,EAAAA,EAAAA,eAClBY,KAAK,WACLC,KAAK,WACLC,aAAa,MACbC,WAAS,EACTC,YAAY,2DAEZd,EAAAA,EAAAA,KAAA,UAAQH,UAAWC,EAAAA,EAAAA,eAAoBa,KAAK,SAAQZ,SAAC,gBAEzDC,EAAAA,EAAAA,KAACe,EAAAA,GAAc,MAG3B,C","sources":["components/Log/log.jsx"],"sourcesContent":["import css from '../Styles.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logIn } from '../../redux/BackEndProps/operations';\nimport { selectError } from '../../redux/BackEndProps/selectors';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { useEffect } from 'react';\nimport { cleanError } from '../../redux/BackEndProps/slice';\n\nconst LogInForm = () => {\n    const dispatch = useDispatch();\n    const error = useSelector(selectError);\n\n    useEffect(() => {\n        if(Number(error) === 400){toast.error('Invalid login ')};\n        dispatch(cleanError());\n    }, [error, dispatch]);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        const email = e.currentTarget.elements.email.value;\n        const password = e.currentTarget.elements.password.value;\n        dispatch(logIn({email, password}));\n    };\n\n    return(\n        <div className={css.divLogInForm}>\n            <h2 className={css.titleLogInForm}>Sign in  your Phonebook ðŸ¤³</h2>\n            <form className={css.logInForm} onSubmit={handleSubmit}>\n                <label className={css.labelLogInForm}>\n                    <span className={css.pRegLogInForm}>Email</span>\n                <input className={css.inputLogInForm} \n                name='Email'\n                type=\"email\"\n                autoComplete=\"off\"\n                autoFocus\n                placeholder=\"Please, enter your valid email\" />\n                </label>\n                <label className={css.labelLogInForm}>\n                    <span className={css.pLogInForm}>Password</span>\n                <input className={css.inputLogInForm} \n                name='Password'\n                type=\"password\"\n                autoComplete=\"off\"\n                autoFocus\n                placeholder=\"The password must consist of at least 7 characters\" />\n                </label>\n                <button className={css.buttonLogOrReg} type=\"submit\">Sign in</button>\n            </form>\n            <ToastContainer />\n            </div>\n    )\n};\n\nexport default LogInForm;"],"names":["dispatch","useDispatch","error","useSelector","selectError","useEffect","Number","toast","cleanError","_jsxs","className","css","children","_jsx","onSubmit","e","preventDefault","email","currentTarget","elements","value","password","logIn","name","type","autoComplete","autoFocus","placeholder","ToastContainer"],"sourceRoot":""}